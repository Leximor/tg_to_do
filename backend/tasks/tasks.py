from celery import shared_task
from django.core.mail import send_mail
from django.utils import timezone
from django.conf import settings
import requests
import logging
import pytz

logger = logging.getLogger(__name__)

def send_telegram_notification(telegram_id, message, inline_keyboard=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
    try:
        bot_token = getattr(settings, 'BOT_TOKEN', None)
        if not bot_token:
            logger.error("BOT_TOKEN not configured in settings")
            return False

        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        data = {
            'chat_id': telegram_id,
            'text': message,
            'parse_mode': 'HTML'
        }

        if inline_keyboard:
            data['reply_markup'] = {
                'inline_keyboard': inline_keyboard
            }

        response = requests.post(url, json=data, timeout=10)
        if response.status_code == 200:
            logger.info(f"Telegram notification sent to {telegram_id}")
            return True
        else:
            logger.error(f"Failed to send Telegram notification: {response.status_code} - {response.text}")
            return False

    except Exception as e:
        logger.error(f"Error sending Telegram notification: {e}")
        return False

def notify_user_about_due_task(task):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ"""
    try:
        if not task.user or not task.user.telegram_id:
            logger.warning(f"Task {task.id} has no user or telegram_id")
            return False
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è America/Adak
        local_tz = pytz.timezone('America/Adak')
        due_date_local = task.due_date.astimezone(local_tz)
        due_date_str = due_date_local.strftime('%Y-%m-%d %H:%M')
        now = timezone.now()
        overdue_duration = now - task.due_date
        hours = int(overdue_duration.total_seconds() // 3600)
        minutes = int((overdue_duration.total_seconds() % 3600) // 60)
        if hours > 0:
            overdue_text = f"{hours}—á {minutes}–º"
        else:
            overdue_text = f"{minutes}–º"
        message = f"""
üö® <b>–ü–†–û–°–†–û–ß–ï–ù–ù–ê–Ø –ó–ê–î–ê–ß–ê!</b>

üìã <b>{task.title}</b>
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {task.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìÖ –î–µ–¥–ª–∞–π–Ω: {due_date_str}
üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join([cat.name for cat in task.categories.all()]) or '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}

‚è∞ –ó–∞–¥–∞—á–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –Ω–∞ {overdue_text}
        """.strip()
        inline_keyboard = [[
            {
                'text': 'üîï –ù–µ –æ–ø–æ–≤–µ—â–∞—Ç—å',
                'callback_data': f'disable_notifications:{task.id}'
            }
        ]]
        return send_telegram_notification(task.user.telegram_id, message, inline_keyboard)
    except Exception as e:
        logger.error(f"Error notifying user about task {task.id}: {e}")
        return False

def notify_user_about_upcoming_task(task):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–µ–º—Å—è –¥–µ–¥–ª–∞–π–Ω–µ"""
    try:
        if not task.user or not task.user.telegram_id:
            logger.warning(f"Task {task.id} has no user or telegram_id")
            return False
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è America/Adak
        local_tz = pytz.timezone('America/Adak')
        due_date_local = task.due_date.astimezone(local_tz)
        due_date_str = due_date_local.strftime('%Y-%m-%d %H:%M')
        time_until_due = task.due_date - timezone.now()
        hours_until_due = time_until_due.total_seconds() / 3600
        if hours_until_due <= 1:
            time_text = "–º–µ–Ω–µ–µ —á–∞—Å–∞"
        elif hours_until_due <= 24:
            time_text = f"{int(hours_until_due)} —á–∞—Å–æ–≤"
        else:
            days = int(hours_until_due / 24)
            time_text = f"{days} –¥–Ω–µ–π"
        message = f"""
‚ö†Ô∏è <b>–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –û –î–ï–î–õ–ê–ô–ù–ï</b>

üìã <b>{task.title}</b>
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {task.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìÖ –î–µ–¥–ª–∞–π–Ω: {due_date_str}
üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join([cat.name for cat in task.categories.all()]) or '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}

‚è∞ –î–æ –¥–µ–¥–ª–∞–π–Ω–∞ –æ—Å—Ç–∞–ª–æ—Å—å: <b>{time_text}</b>
        """.strip()
        inline_keyboard = [[
            {
                'text': 'üîï –ù–µ –æ–ø–æ–≤–µ—â–∞—Ç—å',
                'callback_data': f'disable_notifications:{task.id}'
            }
        ]]
        return send_telegram_notification(task.user.telegram_id, message, inline_keyboard)
    except Exception as e:
        logger.error(f"Error notifying user about upcoming task {task.id}: {e}")
        return False

@shared_task
def check_due_tasks():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
    from .models import Task

    now = timezone.now()
    due_tasks = Task.objects.filter(
        due_date__lte=now,
        is_completed=False,
        notifications_disabled=False  # –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–¥–∞—á–∏ —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    ).select_related('user').prefetch_related('categories')

    logger.info(f"Found {due_tasks.count()} overdue tasks with notifications enabled")

    for task in due_tasks:
        success = notify_user_about_due_task(task)
        if success:
            logger.info(f"Successfully notified user about overdue task {task.id}")
        else:
            logger.error(f"Failed to notify user about overdue task {task.id}")

@shared_task
def check_upcoming_tasks():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á —Å –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏–º—Å—è –¥–µ–¥–ª–∞–π–Ω–æ–º (–∑–∞ 1 —á–∞—Å)"""
    from .models import Task

    now = timezone.now()
    from datetime import timedelta

    # –ó–∞–¥–∞—á–∏, –¥–µ–¥–ª–∞–π–Ω –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Å—Ç—É–ø–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞
    upcoming_deadline = now + timedelta(hours=1)
    upcoming_tasks = Task.objects.filter(
        due_date__gt=now,
        due_date__lte=upcoming_deadline,
        is_completed=False,
        notifications_disabled=False  # –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–¥–∞—á–∏ —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    ).select_related('user').prefetch_related('categories')

    logger.info(f"Found {upcoming_tasks.count()} upcoming tasks with notifications enabled")

    for task in upcoming_tasks:
        success = notify_user_about_upcoming_task(task)
        if success:
            logger.info(f"Successfully notified user about upcoming task {task.id}")
        else:
            logger.error(f"Failed to notify user about upcoming task {task.id}")

@shared_task
def send_daily_reminder():
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–∞—Ö"""
    from .models import Task, UserProfile
    from datetime import timedelta

    now = timezone.now()
    tomorrow = now + timedelta(days=1)

    users_with_tasks = UserProfile.objects.filter(
        tasks__is_completed=False,
        tasks__due_date__gte=now,
        tasks__due_date__lte=tomorrow
    ).distinct()

    logger.info(f"Sending daily reminders to {users_with_tasks.count()} users")

    for user_profile in users_with_tasks:
        try:
            tomorrow_tasks = user_profile.tasks.filter(
                due_date__gte=now,
                due_date__lte=tomorrow,
                is_completed=False
            ).prefetch_related('categories')

            if tomorrow_tasks.exists():
                message = f"""
üìÖ <b>–ï–ñ–ï–î–ù–ï–í–ù–û–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï</b>

–£ –≤–∞—Å –µ—Å—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:

"""
                for task in tomorrow_tasks:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è America/Adak
                    local_tz = pytz.timezone('America/Adak')
                    due_date_local = task.due_date.astimezone(local_tz)
                    due_time_str = due_date_local.strftime('%H:%M')
                    message += f"""
üìã <b>{task.title}</b>
‚è∞ {due_time_str}
üè∑Ô∏è {', '.join([cat.name for cat in task.categories.all()]) or '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}
"""

                message += f"\n–í—Å–µ–≥–æ –∑–∞–¥–∞—á –Ω–∞ –∑–∞–≤—Ç—Ä–∞: <b>{tomorrow_tasks.count()}</b>"

                send_telegram_notification(user_profile.telegram_id, message.strip())
                logger.info(f"Sent daily reminder to user {user_profile.telegram_id}")

        except Exception as e:
            logger.error(f"Error sending daily reminder to user {user_profile.telegram_id}: {e}")

@shared_task
def cleanup_old_notifications():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)"""
    # ToDo –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    # –ù–∞–ø—Ä–∏–º–µ—Ä, —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö
    logger.info("Cleanup old notifications task completed")

@shared_task
def disable_task_notifications(task_id):
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏"""
    from .models import Task

    try:
        task = Task.objects.get(id=task_id)
        task.notifications_disabled = True
        task.save()
        logger.info(f"Notifications disabled for task {task_id}")
        return True
    except Task.DoesNotExist:
        logger.error(f"Task {task_id} not found")
        return False
    except Exception as e:
        logger.error(f"Error disabling notifications for task {task_id}: {e}")
        return False
